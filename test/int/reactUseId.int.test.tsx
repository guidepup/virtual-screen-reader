import React, { useId } from "react";
import { render } from "@testing-library/react";
import { virtual } from "../../src/index.js";

const ComponentWithReactUseId = () => {
  const childId = useId();

  return (
    <>
      <ul>
        <li aria-owns={childId}>Fruit</li>
        <li>Vegetables</li>
      </ul>

      <ul id={childId}>
        <li>Apples</li>
        <li>Bananas</li>
      </ul>
    </>
  );
};

describe("React.useId()", () => {
  afterEach(async () => {
    document.body.innerHTML = "";

    try {
      await virtual.stop();
    } catch {
      // swallow
    }
  });

  test("should handle ids generated by React.useId() hooks", async () => {
    const { container } = render(<ComponentWithReactUseId />);

    await virtual.start({ container });

    for (let i = 0; i <= 14; i++) {
      await virtual.next();
    }

    expect(await virtual.spokenPhraseLog()).toEqual([
      "list",
      "listitem, position 1, group size 2",
      "Fruit",
      "list",
      "listitem, position 1, group size 2",
      "Apples",
      "end of listitem, position 1, group size 2",
      "listitem, position 2, group size 2",
      "Bananas",
      "end of listitem, position 2, group size 2",
      "end of list",
      "end of listitem, position 1, group size 2",
      "listitem, position 2, group size 2",
      "Vegetables",
      "end of listitem, position 2, group size 2",
      "end of list",
    ]);
  });
});
