import React, { useId } from "react";
import { render } from "@testing-library/react";
import { virtual } from "../../src/index.js";

const ComponentWithReactUseId = () => {
  const childId = useId();

  return (
    <>
      <ul>
        <li aria-owns={childId}>Fruit</li>
        <li>Vegetables</li>
      </ul>

      <ul id={childId}>
        <li>Apples</li>
        <li>Bananas</li>
      </ul>
    </>
  );
};

describe("React.useId()", () => {
  afterEach(async () => {
    document.body.innerHTML = "";

    try {
      await virtual.stop();
    } catch {
      // swallow
    }
  });

  test("should handle ids generated by React.useId() hooks", async () => {
    const { container } = render(<ComponentWithReactUseId />);

    await virtual.start({ container });

    for (let i = 0; i <= 14; i++) {
      await virtual.next();
    }

    expect(await virtual.spokenPhraseLog()).toEqual([
      "list",
      "listitem, level 1, position 1, set size 2",
      "Fruit",
      "list",
      "listitem, level 2, position 1, set size 2",
      "Apples",
      "end of listitem, level 2, position 1, set size 2",
      "listitem, level 2, position 2, set size 2",
      "Bananas",
      "end of listitem, level 2, position 2, set size 2",
      "end of list",
      "end of listitem, level 1, position 1, set size 2",
      "listitem, level 1, position 2, set size 2",
      "Vegetables",
      "end of listitem, level 1, position 2, set size 2",
      "end of list",
    ]);
  });
});
